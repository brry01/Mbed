#include "mbed.h"

#define ENABLE 0x08      // Para habilitar el LCD
#define COMMAND_MODE 0x00 // RS = 0 para comandos
#define DATA_MODE 0x04    // RS = 1 para datos

DigitalOut CS(D10); // Pin de selección de chip para SPI
SPI ser_port(D11, D12, D13); // MOSI, MISO, SCK

// Prototipos de funciones
void init_lcd(void);
void clr_lcd(void);
void print_lcd(const char *string);
void shift_out(int data);
void write_cmd(int cmd);
void write_data(char c);
void write_4bit(int data, int mode);

int main() {
    CS = 1;           // Deshabilitar SPI antes de iniciar
    init_lcd();       // Inicializar LCD
    clr_lcd();        // Limpiar pantalla LCD

    print_lcd("Hello world!"); // Mostrar "Hello world!"
    write_cmd(0xC0);  // Mover cursor a la segunda línea
    wait_us(40);
    print_lcd("Testing"); // Mostrar "Testing"

    while (true) {
        thread_sleep_for(100); // Mantener el programa corriendo
    }
}

// ------------ Funciones de LCD ------------ //

void init_lcd(void) {
    thread_sleep_for(40);
    shift_out(0x30);
    wait_us(37);
    write_cmd(0x20);
    wait_us(37);
    write_cmd(0x20);
    wait_us(37);
    write_cmd(0x0C);
    wait_us(37);
    write_cmd(0x01);
    wait_us(1520);
    write_cmd(0x06);
    wait_us(37);
    write_cmd(0x28);
    wait_us(37);
}

void clr_lcd(void) {
    write_cmd(0x01); // Limpiar pantalla LCD
    wait_us(1520);
}

void print_lcd(const char *string) {
    while (*string) {
        write_data(*string++);
        wait_us(40);
    }
}

void shift_out(int data) {
    CS = 0;
    ser_port.write(data);
    CS = 1;
}

void write_cmd(int cmd) {
    write_4bit(cmd, COMMAND_MODE);
}

void write_data(char c) {
    write_4bit(c, DATA_MODE);
}

void write_4bit(int data, int mode) {
    int hi_n = (data & 0xF0);
    int lo_n = ((data << 4) & 0xF0);

    shift_out(hi_n | ENABLE | mode);
    wait_us(1);
    shift_out(hi_n & ~ENABLE);
    shift_out(lo_n | ENABLE | mode);
    wait_us(1);
    shift_out(lo_n & ~ENABLE);
}